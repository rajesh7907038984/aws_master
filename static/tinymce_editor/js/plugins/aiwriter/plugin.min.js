/**
 * TinyMCE Plugin for AI Content Generation using Anthropic API
 * Adds a button to generate content with Nexsy AI
 */

(function() {
    'use strict';
    
    console.log('AI Writer Plugin loading...');
    
    tinymce.PluginManager.add('aiwriter', function(editor) {
        console.log('AI Writer Plugin initialized for editor:', editor.id);
        
        // Get the base URL for the plugin
        const baseUrl = editor.editorManager.baseURL + '/plugins/aiwriter';
        
        // Check if user is authenticated by looking for Django user context
        function isUserAuthenticated() {
            // Check for Django user context in various ways
            if (typeof window.userAuthenticated !== 'undefined') {
                return window.userAuthenticated;
            }
            
            // Check for CSRF token as an indicator of authentication
            const csrfToken = getCsrfToken();
            return csrfToken && csrfToken.length > 0;
        }
        
        // Register a custom icon for the AI writer button
        editor.ui.registry.addIcon('ai-custom-icon', '<svg width="24" height="24" viewBox="0 0 24 24"><rect x="2" y="2" width="20" height="20" rx="3" fill="#4285f4" /><path d="M8.4,17h-2L10,7h2l3.6,10h-2L13,14.4H9L8.4,17z M9.4,13h3.2l-1.6-4.8L9.4,13z" fill="white" /><path d="M15.4,17v-1.2h0.4c0.5,0,0.8-0.1,1-0.3c0.2-0.2,0.3-0.5,0.3-0.9V9.4c0-0.4-0.1-0.7-0.3-0.9c-0.2-0.2-0.5-0.3-1-0.3h-0.4V7h3.2v7.6c0,0.4,0.1,0.7,0.3,0.9c0.2,0.2,0.5,0.3,1,0.3h0.4V17H15.4z" fill="white" /></svg>');
        
        // Add button to toolbar with authentication check
        editor.ui.registry.addButton('aiwriter', {
            text: null,
            icon: 'ai-custom-icon',
            tooltip: 'AI Writer (requires login)',
            onAction: function() {
                // Check authentication first
                if (!isUserAuthenticated()) {
                    editor.notificationManager.open({
                        text: 'Please log in to use the AI Writer feature.',
                        type: 'warning',
                        timeout: 5000
                    });
                    return;
                }
                
                // Open dialog for AI content generation
                openAIDialog();
            }
        });
        
        // Log toolbar setup to debug
        editor.on('BeforeSetContent', function() {
            console.log('Editor BeforeSetContent, checking for aiwriter button config');
            const editorSettings = editor.settings || {};
            console.log('Editor toolbar settings:', editorSettings.toolbar);
            console.log('Editor toolbar2 settings:', editorSettings.toolbar2);
            console.log('Editor toolbar_mode:', editorSettings.toolbar_mode);
        });
        
        // Add menu item under Insert menu
        editor.ui.registry.addMenuItem('aiwriter', {
            text: 'AI Writer',
            icon: 'ai-custom-icon',
            context: 'insert',
            onAction: function() {
                // Check authentication first
                if (!isUserAuthenticated()) {
                    editor.notificationManager.open({
                        text: 'Please log in to use the AI Writer feature.',
                        type: 'warning',
                        timeout: 5000
                    });
                    return;
                }
                
                openAIDialog();
            }
        });
        
        // Function to open the AI content generation dialog
        function openAIDialog() {
            editor.windowManager.open({
                title: 'AI Writer',
                body: {
                    type: 'panel',
                    items: [
                        {
                            type: 'textarea',
                            name: 'prompt',
                            label: 'Enter your prompt',
                            placeholder: 'e.g., Write a paragraph about the benefits of online learning'
                        }
                    ]
                },
                buttons: [
                    {
                        type: 'cancel',
                        text: 'Cancel'
                    },
                    {
                        type: 'submit',
                        text: 'Generate',
                        primary: true
                    }
                ],
                onSubmit: function(api) {
                    const data = api.getData();
                    const prompt = data.prompt;
                    
                    if (!prompt || prompt.trim() === '') {
                        editor.notificationManager.open({
                            text: 'Please enter a prompt before generating content.',
                            type: 'warning'
                        });
                        return;
                    }
                    
                    // Show loading state
                    api.block('Generating content with Nexsy AI...');
                    
                    // Make API request to our backend
                    fetch('/tinymce/generate_ai_content/', {
                        method: 'POST',
                        credentials: 'same-origin',  // Include cookies for authentication
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': getCsrfToken()
                        },
                        body: JSON.stringify({
                            prompt: prompt.trim()
                        })
                    })
                    .then(response => {
                        console.log('AI API response status:', response.status);
                        console.log('AI API response URL:', response.url);
                        
                        // Check if we were redirected to login page
                        if (response.url && response.url.includes('/login/')) {
                            throw new Error('You must be logged in to use the AI feature. Please log in and try again.');
                        }
                        
                        // Check for redirect (302) which often indicates authentication required
                        if (response.status === 302) {
                            throw new Error('Authentication required. Please log in to use the AI Writer feature.');
                        }
                        
                        if (!response.ok) {
                            // Try to get error message from response
                            return response.text().then(text => {
                                try {
                                    const errorData = JSON.parse(text);
                                    throw new Error(errorData.error || `Request failed with status: ${response.status}`);
                                } catch (e) {
                                    // Handle different HTTP error codes with better messages
                                    if (response.status === 500) {
                                        throw new Error('Server error occurred. Please try again or contact support.');
                                    } else if (response.status === 503) {
                                        throw new Error('AI service is temporarily unavailable. Please try again later.');
                                    } else if (response.status === 429) {
                                        throw new Error('Too many requests. Please wait a moment and try again.');
                                    } else if (response.status === 401 || response.status === 403) {
                                        throw new Error('Authentication required. Please log in to use the AI Writer feature.');
                                    } else {
                                        throw new Error(`Request failed with status: ${response.status}. Please try again.`);
                                    }
                                }
                            });
                        }
                        
                        return response.json();
                    })
                    .then(data => {
                        console.log('AI API response data:', data);
                        
                        // Check if response indicates success
                        if (data.success === false) {
                            throw new Error(data.error || 'Unknown error occurred');
                        }
                        
                        // Insert the generated content at cursor position
                        if (data.content) {
                            editor.insertContent(data.content);
                            editor.notificationManager.open({
                                text: 'AI content generated successfully!',
                                type: 'success',
                                timeout: 3000
                            });
                            api.close();
                        } else {
                            throw new Error('No content received from AI service');
                        }
                    })
                    .catch(error => {
                        console.error('Error generating AI content:', error);
                        
                        // Show user-friendly error messages
                        let errorMessage = 'Failed to generate content. ';
                        
                        if (error.message.includes('log in') || error.message.includes('Authentication') || error.message.includes('authentication')) {
                            errorMessage = error.message; // Use the specific authentication message
                        } else if (error.message.includes('rate limit') || error.message.includes('429')) {
                            errorMessage += 'Too many requests. Please try again in a few moments.';
                        } else if (error.message.includes('timeout') || error.message.includes('504')) {
                            errorMessage += 'Request timed out. Please try again.';
                        } else if (error.message.includes('connection') || error.message.includes('network')) {
                            errorMessage += 'Network connection error. Please check your internet connection.';
                        } else if (error.message.includes('503') || error.message.includes('unavailable')) {
                            errorMessage += 'Service is temporarily unavailable. Please try again later.';
                        } else if (error.message.includes('500')) {
                            errorMessage += 'Server error occurred. Please try again or contact support.';
                        } else {
                            errorMessage += error.message || 'Please try again.';
                        }
                        
                        editor.notificationManager.open({
                            text: errorMessage,
                            type: 'error',
                            timeout: 8000
                        });
                    })
                    .finally(() => {
                        api.unblock();
                    });
                }
            });
        }
        
        // Helper function to get CSRF token
        function getCsrfToken() {
            // Try to get from cookie
            const cookieValue = document.cookie
                .split('; ')
                .find(row => row.startsWith('csrftoken='));
                
            if (cookieValue) {
                return cookieValue.split('=')[1];
            }
            
            // Try to get from form input
            const tokenInput = document.querySelector('input[name="csrfmiddlewaretoken"]');
            if (tokenInput) {
                return tokenInput.value;
            }
            
            return '';
        }
        
        // Register editor callback for when editor is initialized
        editor.on('init', function() {
            console.log('AI Writer: Editor initialized, checking for AI Writer button');
            
            // Check authentication status and update button accordingly
            const authenticated = isUserAuthenticated();
            console.log('User authenticated:', authenticated);
            
            // Add a delay to let the UI fully render
            setTimeout(function() {
                // Look for the button in various places
                const aiWriterBtn = document.querySelector('.tox-tbtn[aria-label*="AI Writer"]');
                const aiWriterBtn2 = document.querySelector('.tox-tbtn[data-mce-name="aiwriter"]');
                const overflowBtn = document.querySelector('.tox-tbtn[data-mce-name="overflow-button"]');
                
                console.log('AI Writer button found (by aria-label):', !!aiWriterBtn);
                console.log('AI Writer button found (by data-mce-name):', !!aiWriterBtn2);
                console.log('Overflow button found:', !!overflowBtn);
                
                // Update button appearance based on authentication status
                if (aiWriterBtn || aiWriterBtn2) {
                    const button = aiWriterBtn || aiWriterBtn2;
                    if (!authenticated) {
                        button.style.opacity = '0.6';
                        button.title = 'AI Writer (Please log in to use this feature)';
                    }
                }
                
                // If button is in overflow, try to fix it
                if (overflowBtn && (!aiWriterBtn || !aiWriterBtn2)) {
                    console.log('Attempting to fix AI Writer button placement');
                    // Trigger the overflow button to show more options
                    overflowBtn.click();
                    
                    // Give it a moment to render the overflow items
                    setTimeout(() => {
                        // Close the overflow menu
                        overflowBtn.click();
                    }, 300);
                }
            }, 500);
        });
        
        // Return metadata about the plugin
        return {
            getMetadata: function() {
                return {
                    name: 'AI Writer',
                    url: 'https://example.com/aiwriter'
                };
            }
        };
    });
})(); 