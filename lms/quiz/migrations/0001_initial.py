# Generated by Django 4.2.19 on 2025-09-23 08:25

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name="Answer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("answer_text", models.TextField()),
                ("is_correct", models.BooleanField(default=False)),
                (
                    "answer_order",
                    models.PositiveIntegerField(db_column="answer_order", default=0),
                ),
                (
                    "explanation",
                    models.TextField(
                        blank=True,
                        help_text="Explanation for why this answer is correct/incorrect",
                    ),
                ),
                (
                    "learning_style",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("visual", "Visual"),
                            ("auditory", "Auditory"),
                            ("kinesthetic", "Kinesthetic"),
                        ],
                        help_text="Learning style for VAK test answer options",
                        max_length=20,
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["answer_order", "id"],
            },
        ),
        migrations.CreateModel(
            name="MatchingPair",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("left_item", models.TextField()),
                ("right_item", models.TextField()),
                ("pair_order", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["pair_order", "id"],
            },
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("question_text", models.TextField()),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("multiple_choice", "Multiple Choice"),
                            ("multiple_select", "Multiple Select"),
                            ("true_false", "True/False"),
                            ("fill_blank", "Fill in the Blank"),
                            ("multi_blank", "Multiple Blanks"),
                            ("matching", "Matching"),
                            ("drag_drop_matching", "Drag & Drop Matching"),
                        ],
                        max_length=20,
                    ),
                ),
                ("points", models.PositiveIntegerField(default=1)),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "min_required",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Minimum number of options required for multiple select questions",
                    ),
                ),
                (
                    "case_sensitive",
                    models.BooleanField(
                        default=False,
                        help_text="Whether text answers are case sensitive",
                    ),
                ),
                (
                    "assessment_level",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("below_level_1", "Below Level 1"),
                            ("level_1", "Level 1"),
                            ("level_2", "Level 2"),
                        ],
                        help_text="Assessment level for Initial Assessment questions",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["order", "id"],
            },
        ),
        migrations.CreateModel(
            name="Quiz",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "instructions",
                    models.TextField(
                        blank=True,
                        help_text="Detailed instructions for taking the quiz. Will be shown to students.",
                    ),
                ),
                (
                    "time_limit",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Time limit in minutes. Set to 0 for no limit.",
                    ),
                ),
                (
                    "passing_score",
                    models.PositiveIntegerField(
                        blank=True,
                        default=70,
                        help_text="Passing score in percentage (not required for VAK Test)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "attempts_allowed",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Number of attempts allowed per user. Set to -1 for unlimited.",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the quiz expires. Leave empty for no expiration.",
                        null=True,
                    ),
                ),
                (
                    "show_correct_answers",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to show correct answers after submission",
                    ),
                ),
                (
                    "randomize_questions",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to randomize question order for each attempt",
                    ),
                ),
                (
                    "require_sequential",
                    models.BooleanField(
                        default=False,
                        help_text="Whether questions must be answered in order",
                    ),
                ),
                (
                    "max_concurrent_attempts",
                    models.PositiveIntegerField(
                        default=3,
                        help_text="Maximum number of concurrent attempts allowed",
                    ),
                ),
                (
                    "is_initial_assessment",
                    models.BooleanField(
                        default=False,
                        help_text="Mark this quiz as an Initial Assessment. Multiple assessments are allowed per branch.",
                    ),
                ),
                (
                    "is_vak_test",
                    models.BooleanField(
                        default=False,
                        help_text="Mark this quiz as a VAK Test. Multiple tests are allowed per branch.",
                    ),
                ),
                (
                    "level_2_percentage",
                    models.PositiveIntegerField(
                        blank=True,
                        default=75,
                        help_text="Level 2 Minimum % - Percentage threshold for Level 2 (0-100)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "level_1_percentage",
                    models.PositiveIntegerField(
                        blank=True,
                        default=60,
                        help_text="Level 1 Minimum % - Percentage threshold for Level 1 (0-100)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "below_level_1_percentage",
                    models.PositiveIntegerField(
                        blank=True,
                        default=50,
                        help_text="Below Level 1 Minimum % - Percentage threshold for Below Level 1 (0-100)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "total_threshold",
                    models.PositiveIntegerField(
                        blank=True,
                        default=70,
                        help_text="Overall Performance % - Total percentage threshold for overall performance (0-100)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Quizzes",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="QuizAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "score",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("is_completed", models.BooleanField(default=False)),
                ("start_time", models.DateTimeField(auto_now_add=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                (
                    "active_time_seconds",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total active time spent on quiz pages in seconds",
                    ),
                ),
                (
                    "last_activity_ping",
                    models.DateTimeField(
                        blank=True,
                        help_text="Last time user activity was detected",
                        null=True,
                    ),
                ),
                (
                    "page_focus_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="When user last focused on the quiz page",
                        null=True,
                    ),
                ),
                (
                    "is_currently_active",
                    models.BooleanField(
                        default=False,
                        help_text="Whether user is currently active on the quiz page",
                    ),
                ),
            ],
            options={
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="QuizGradeOverride",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("original_score", models.DecimalField(decimal_places=2, max_digits=5)),
                ("override_score", models.DecimalField(decimal_places=2, max_digits=5)),
                ("override_reason", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="QuizTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("slug", models.SlugField(unique=True)),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="UserAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text_answer", models.TextField(blank=True, null=True)),
                ("matching_answers", models.JSONField(blank=True, null=True)),
                ("is_correct", models.BooleanField(default=False)),
                (
                    "points_earned",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "answer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="quiz.answer",
                    ),
                ),
                (
                    "attempt",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_answers",
                        to="quiz.quizattempt",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="quiz.question"
                    ),
                ),
            ],
            options={
                "ordering": ["question__order"],
            },
        ),
        migrations.CreateModel(
            name="QuizRubricEvaluation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("points", models.FloatField(default=0)),
                ("comments", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "criterion",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quiz_evaluations",
                        to="lms_rubrics.rubriccriterion",
                    ),
                ),
            ],
            options={
                "ordering": ["criterion__position"],
            },
        ),
    ]
