# Generated by Django 3.2.25 on 2025-10-06 03:51

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('scorm', '0003_auto_20251005_1906'),
    ]

    operations = [
        migrations.CreateModel(
            name='ScormComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_type', models.CharField(choices=[('learner', 'Learner Comment'), ('lms', 'LMS Comment')], help_text='Type of comment', max_length=10)),
                ('comment_text', models.TextField(help_text='Comment content')),
                ('location', models.CharField(blank=True, help_text='Location where comment was made', max_length=500)),
                ('timestamp', models.DateTimeField(blank=True, help_text='When the comment was made', null=True)),
                ('comment_data', models.JSONField(default=dict, help_text='Additional comment data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='scorm.scormattempt')),
            ],
            options={
                'verbose_name': 'SCORM Comment',
                'verbose_name_plural': 'SCORM Comments',
                'db_table': 'scorm_comment',
                'ordering': ['timestamp', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScormObjective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('objective_id', models.CharField(help_text='Unique identifier for the objective', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the objective')),
                ('success_status', models.CharField(choices=[('passed', 'Passed'), ('failed', 'Failed'), ('completed', 'Completed'), ('incomplete', 'Incomplete'), ('browsed', 'Browsed'), ('not attempted', 'Not Attempted')], default='not attempted', help_text='Success status of the objective', max_length=20)),
                ('completion_status', models.CharField(choices=[('passed', 'Passed'), ('failed', 'Failed'), ('completed', 'Completed'), ('incomplete', 'Incomplete'), ('browsed', 'Browsed'), ('not attempted', 'Not Attempted')], default='not attempted', help_text='Completion status of the objective', max_length=20)),
                ('score_raw', models.DecimalField(blank=True, decimal_places=2, help_text='Raw score for objective', max_digits=5, null=True)),
                ('score_min', models.DecimalField(blank=True, decimal_places=2, default=0, help_text='Minimum score for objective', max_digits=5, null=True)),
                ('score_max', models.DecimalField(blank=True, decimal_places=2, default=100, help_text='Maximum score for objective', max_digits=5, null=True)),
                ('score_scaled', models.DecimalField(blank=True, decimal_places=3, help_text='Scaled score (0-1)', max_digits=4, null=True)),
                ('progress_measure', models.DecimalField(blank=True, decimal_places=3, help_text='Progress measure (0-1)', max_digits=4, null=True)),
                ('objective_data', models.JSONField(default=dict, help_text='Additional objective data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objectives', to='scorm.scormattempt')),
            ],
            options={
                'verbose_name': 'SCORM Objective',
                'verbose_name_plural': 'SCORM Objectives',
                'db_table': 'scorm_objective',
                'ordering': ['created_at'],
                'unique_together': {('attempt', 'objective_id')},
            },
        ),
        migrations.CreateModel(
            name='ScormInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_id', models.CharField(help_text='Unique identifier for the interaction', max_length=255)),
                ('interaction_type', models.CharField(choices=[('choice', 'Choice'), ('true-false', 'True/False'), ('fill-in', 'Fill-in'), ('matching', 'Matching'), ('performance', 'Performance'), ('sequencing', 'Sequencing'), ('likert', 'Likert'), ('numeric', 'Numeric'), ('other', 'Other')], help_text='Type of interaction', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Description of the interaction')),
                ('student_response', models.TextField(blank=True, help_text="Learner's response to the interaction")),
                ('correct_response', models.TextField(blank=True, help_text='Correct response pattern')),
                ('result', models.CharField(blank=True, choices=[('correct', 'Correct'), ('incorrect', 'Incorrect'), ('unanticipated', 'Unanticipated'), ('neutral', 'Neutral'), ('numeric', 'Numeric')], help_text='Result of the interaction', max_length=20)),
                ('weighting', models.DecimalField(blank=True, decimal_places=2, help_text='Weight of the interaction', max_digits=5, null=True)),
                ('score_raw', models.DecimalField(blank=True, decimal_places=2, help_text='Raw score for this interaction', max_digits=5, null=True)),
                ('timestamp', models.DateTimeField(blank=True, help_text='When the interaction occurred', null=True)),
                ('latency', models.CharField(blank=True, help_text='Time taken to respond (SCORM format)', max_length=50)),
                ('objectives', models.JSONField(default=list, help_text='Related objective IDs')),
                ('learner_response_data', models.JSONField(default=dict, help_text='Additional learner response data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='scorm.scormattempt')),
            ],
            options={
                'verbose_name': 'SCORM Interaction',
                'verbose_name_plural': 'SCORM Interactions',
                'db_table': 'scorm_interaction',
                'ordering': ['timestamp', 'created_at'],
                'unique_together': {('attempt', 'interaction_id')},
            },
        ),
    ]
