# Generated by Django 3.2.25 on 2025-10-29 09:47

import core.utils.fields
import courses.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='discussion_attachments/')),
                ('file_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('document', 'Document')], max_length=10)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField()),
                ('short_description', models.TextField(blank=True, help_text='Brief description of the course', null=True)),
                ('description', core.utils.fields.TinyMCEField(blank=True, default='', help_text='Detailed description of the course')),
                ('course_code', models.CharField(blank=True, help_text='Course code or identifier', max_length=50, null=True)),
                ('course_outcomes', core.utils.fields.TinyMCEField(blank=True, default='', help_text='Expected learning outcomes for the course')),
                ('course_rubrics', core.utils.fields.TinyMCEField(blank=True, default='', help_text='Assessment rubrics for the course')),
                ('course_image', models.ImageField(blank=True, help_text='Course thumbnail image', max_length=800, null=True, upload_to=courses.models.course_image_path)),
                ('course_video', models.FileField(blank=True, help_text='Course introduction video', max_length=800, null=True, upload_to=courses.models.course_video_path)),
                ('is_active', models.BooleanField(default=True)),
                ('is_temporary', models.BooleanField(default=False, help_text='Whether this course is temporary')),
                ('language', models.CharField(choices=[('en', 'English'), ('es', 'Spanish'), ('fr', 'French')], default='en', help_text='Primary language of the course', max_length=10)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('password', 'Password Protected')], default='public', help_text='Course visibility setting', max_length=20)),
                ('schedule_type', models.CharField(choices=[('self_paced', 'Self-paced'), ('scheduled', 'Scheduled')], default='self_paced', help_text='Course schedule type', max_length=20)),
                ('require_enrollment', models.BooleanField(default=True, help_text='Require enrollment to access course')),
                ('sequential_progression', models.BooleanField(default=False, help_text='Require sequential progression through topics')),
                ('all_topics_complete', models.BooleanField(default=False, help_text='Require all topics to be completed')),
                ('minimum_score', models.BooleanField(default=False, help_text='Require minimum score to complete')),
                ('certificate_type', models.CharField(choices=[('standard', 'Standard Certificate'), ('custom', 'Custom Certificate')], default='standard', help_text='Type of certificate issued', max_length=20)),
                ('catalog_visibility', models.CharField(choices=[('visible', 'Visible in Catalog'), ('hidden', 'Hidden from Catalog')], default='visible', help_text='Control whether this course appears in the catalog', max_length=20)),
                ('public_enrollment', models.BooleanField(default=True, help_text='Allow anyone to enroll in this course')),
                ('enrollment_capacity', models.PositiveIntegerField(blank=True, help_text='Maximum number of learners allowed (leave blank for unlimited)', null=True)),
                ('require_enrollment_approval', models.BooleanField(default=False, help_text='Require instructor approval for enrollment requests')),
                ('start_date', models.DateTimeField(blank=True, help_text='When learners can start taking this course (leave blank for immediate access)', null=True)),
                ('end_date', models.DateTimeField(blank=True, help_text='When access to this course ends (leave blank for unlimited access)', null=True)),
                ('time_limit_days', models.PositiveIntegerField(blank=True, help_text='Days allowed to complete the course from enrollment (leave blank for unlimited time)', null=True)),
                ('retain_access_after_completion', models.BooleanField(default=True, help_text='Allow learners to access course content after completion')),
                ('enforce_sequence', models.BooleanField(default=False, help_text='If enabled, learners must complete topics in order')),
                ('completion_percentage', models.PositiveIntegerField(default=100, help_text='Percentage of topics that must be completed to finish the course')),
                ('passing_score', models.PositiveIntegerField(default=70, help_text='Minimum score required to pass the course (percentage)')),
                ('certificate_enabled', models.BooleanField(default=False, help_text='Issue certificates upon course completion')),
                ('issue_certificate', models.BooleanField(default=False, help_text='Issue certificates to learners upon completion')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, help_text='Price of the course', max_digits=10)),
                ('coupon_code', models.CharField(blank=True, help_text='Discount coupon code', max_length=50, null=True)),
                ('discount_percentage', models.PositiveIntegerField(default=0, help_text='Discount percentage (0-100)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CourseCompletionRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requirement_type', models.CharField(default='score_threshold', help_text="Type of requirement (e.g., 'topic_completion', 'score_threshold')", max_length=100)),
                ('requirement_value', models.TextField(default='0', help_text='Value or configuration for the requirement')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('completed', models.BooleanField(default=False)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('enrollment_source', models.CharField(choices=[('manual', 'Manual Enrollment'), ('auto_prerequisite', 'Auto-enrolled for Prerequisites'), ('auto_dependent', 'Auto-enrolled from Dependent Course'), ('bulk', 'Bulk Enrollment'), ('self', 'Self Enrollment')], default='manual', help_text='How the user was enrolled in this course', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='CourseFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Discussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='LearningObjective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=800)),
                ('description', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=800)),
                ('description', models.TextField(blank=True)),
                ('instructions', models.TextField(blank=True, help_text='Instructions for completing this topic')),
                ('content_type', models.CharField(choices=[('Video', 'Video'), ('Document', 'Document'), ('Text', 'Text'), ('Audio', 'Audio'), ('Web', 'Web Content'), ('Quiz', 'Quiz'), ('Assignment', 'Assignment'), ('EmbedVideo', 'Embedded Video'), ('Conference', 'ILT/Conference'), ('Discussion', 'Discussion')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('draft', 'Draft'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('endless_access', models.BooleanField(default=False)),
                ('web_url', models.URLField(blank=True, help_text='URL for Web Content type topics', max_length=800, null=True)),
                ('content_file', models.FileField(blank=True, help_text='Upload file for Video, Audio, Document content', max_length=800, null=True, upload_to=courses.models.content_file_path)),
                ('text_content', core.utils.fields.TinyMCEField(blank=True, default='', help_text='Rich text content for Text type topics', null=True)),
                ('embed_code', models.TextField(blank=True, help_text='HTML embed code for embedded video content', null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('alignment', models.CharField(choices=[('left', 'Left'), ('center', 'Center'), ('right', 'Right')], default='left', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('restrict_to_learners', models.BooleanField(default=False, help_text='Enable learner-specific restrictions for this topic')),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='TopicProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress_data', models.JSONField(default=dict, help_text='Stores progress data specific to content type')),
                ('bookmark', models.JSONField(blank=True, help_text='Stores last position or state in content', null=True)),
                ('completion_data', models.JSONField(blank=True, help_text='Detailed completion tracking data', null=True)),
                ('completed', models.BooleanField(default=False)),
                ('completion_method', models.CharField(choices=[('auto', 'Automatic'), ('manual', 'Manual')], default='auto', max_length=20)),
                ('manually_completed', models.BooleanField(default=False)),
                ('attempts', models.IntegerField(default=0)),
                ('last_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('best_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_time_spent', models.IntegerField(default=0, help_text='Total time spent in seconds')),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('first_accessed', models.DateTimeField(auto_now_add=True)),
                ('audio_progress', models.FloatField(default=0.0)),
                ('last_audio_position', models.FloatField(default=0.0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='courses.topic')),
            ],
            options={
                'ordering': ['-last_accessed'],
            },
        ),
    ]
