# Generated by Django 3.2.25 on 2025-10-29 09:47

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('quiz', '0001_initial'),
        ('branches', '__first__'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('globaladmin', 'Global Admin'), ('superadmin', 'SuperAdmin'), ('admin', 'Admin'), ('instructor', 'Instructor'), ('learner', 'Learner')], default='learner', help_text='Role of the user (e.g., admin, instructor, learner).', max_length=20)),
                ('language', models.CharField(default='en', help_text='Preferred language of the user.', max_length=10)),
                ('timezone', models.CharField(default='UTC', help_text='Preferred timezone of the user.', max_length=50)),
                ('timezone_detected_at', models.DateTimeField(blank=True, help_text="When the user's timezone was first auto-detected", null=True)),
                ('profile_image', models.ImageField(blank=True, help_text='Profile picture for the user. Recommended size: 300x300 pixels.', null=True, upload_to='profile_images/')),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number', max_length=20, null=True)),
                ('unique_learner_number', models.BigIntegerField(blank=True, help_text='Unique Learner Number (ULN)', null=True, unique=True)),
                ('family_name', models.CharField(blank=True, help_text='Family name/surname', max_length=800, null=True)),
                ('given_names', models.CharField(blank=True, help_text='Given name(s)/first name(s)', max_length=800, null=True)),
                ('date_of_birth', models.DateField(blank=True, help_text='Date of birth (YYYY-MM-DD)', null=True)),
                ('sex', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other'), ('Prefer Not to Say', 'Prefer Not to Say')], help_text='Gender', max_length=20, null=True)),
                ('sex_other', models.CharField(blank=True, help_text="Other sex/gender if 'Other' is selected", max_length=100, null=True)),
                ('sexual_orientation', models.CharField(blank=True, choices=[('Heterosexual or Straight', 'Heterosexual or Straight'), ('Gay or Lesbian', 'Gay or Lesbian'), ('Bisexual', 'Bisexual'), ('Other sexual orientation', 'Other sexual orientation')], help_text='Sexual orientation', max_length=50, null=True)),
                ('sexual_orientation_other', models.CharField(blank=True, help_text="Other sexual orientation if 'Other sexual orientation' is selected", max_length=100, null=True)),
                ('ethnicity', models.CharField(blank=True, choices=[('White British', 'White British'), ('White Irish', 'White Irish'), ('White Other', 'White Other'), ('Black African', 'Black African'), ('Black Caribbean', 'Black Caribbean'), ('Black Other', 'Black Other'), ('Asian Indian', 'Asian Indian'), ('Asian Pakistani', 'Asian Pakistani'), ('Asian Bangladeshi', 'Asian Bangladeshi'), ('Asian Chinese', 'Asian Chinese'), ('Asian Other', 'Asian Other'), ('Mixed White and Black Caribbean', 'Mixed White and Black Caribbean'), ('Mixed White and Black African', 'Mixed White and Black African'), ('Mixed White and Asian', 'Mixed White and Asian'), ('Mixed Other', 'Mixed Other'), ('Other Ethnic Group', 'Other Ethnic Group'), ('Prefer Not to Say', 'Prefer Not to Say')], help_text='Ethnicity', max_length=50, null=True)),
                ('ethnicity_other', models.CharField(blank=True, help_text="Other ethnicity if any 'Other' ethnicity option is selected", max_length=100, null=True)),
                ('current_postcode', models.CharField(blank=True, help_text='Current UK postcode or ZZ99 9ZZ if unknown', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid UK postcode or ZZ99 9ZZ if unknown', regex='^[A-Z]{1,2}[0-9][A-Z0-9]? ?[0-9][A-Z]{2}$|^ZZ99 9ZZ$')])),
                ('address_line1', models.CharField(blank=True, help_text='Street address/house number', max_length=800, null=True)),
                ('address_line2', models.CharField(blank=True, help_text='Apartment/Suite/Unit/Building', max_length=800, null=True)),
                ('city', models.CharField(blank=True, help_text='City or town', max_length=100, null=True)),
                ('county', models.CharField(blank=True, help_text='County/state/province', max_length=100, null=True)),
                ('country', models.CharField(blank=True, default='United Kingdom', help_text='Country', max_length=100, null=True)),
                ('is_non_uk_address', models.BooleanField(default=False, help_text='Whether the address is outside the UK')),
                ('contact_preference', models.CharField(blank=True, choices=[('Email', 'Email'), ('Phone', 'Phone'), ('None', 'None')], help_text='Preferred method of contact', max_length=10, null=True)),
                ('study_area', models.CharField(blank=True, choices=[('Business and Management', 'Business and Management'), ('Engineering', 'Engineering'), ('Health and Social Care', 'Health and Social Care'), ('Information Technology', 'Information Technology'), ('Construction', 'Construction'), ('Education and Training', 'Education and Training'), ('Arts and Media', 'Arts and Media'), ('Science and Mathematics', 'Science and Mathematics'), ('Hospitality and Catering', 'Hospitality and Catering'), ('Other', 'Other')], help_text='Area of study', max_length=50, null=True)),
                ('study_area_other', models.CharField(blank=True, help_text="Other study area if 'Other' is selected", max_length=100, null=True)),
                ('level_of_study', models.CharField(blank=True, choices=[('Pre Entry', 'Pre Entry'), ('Entry Level 1', 'Entry Level 1'), ('Entry Level 2', 'Entry Level 2'), ('Entry Level 3', 'Entry Level 3'), ('Level 1', 'Level 1'), ('Level 2', 'Level 2'), ('Level 3', 'Level 3'), ('Level 4', 'Level 4'), ('Level 5', 'Level 5'), ('Level 6', 'Level 6'), ('Level 7', 'Level 7'), ('Level 8', 'Level 8')], help_text='Level of study', max_length=50, null=True)),
                ('grades', models.CharField(blank=True, choices=[('No Formal Qualification', 'No Formal Qualification'), ('High School Incomplete', 'High School Incomplete'), ('High School Diploma / Secondary School Certificate', 'High School Diploma / Secondary School Certificate'), ('Vocational Qualification', 'Vocational Qualification'), ('Certificate', 'Certificate'), ('Diploma', 'Diploma'), ('Advanced Diploma', 'Advanced Diploma'), ('Associate Degree', 'Associate Degree'), ("Bachelor's Degree", "Bachelor's Degree"), ('Postgraduate Certificate', 'Postgraduate Certificate'), ('Postgraduate Diploma', 'Postgraduate Diploma'), ("Master's Degree", "Master's Degree"), ('Doctorate / PhD', 'Doctorate / PhD'), ('A+', 'A+'), ('A', 'A'), ('A−', 'A−'), ('B+', 'B+'), ('B', 'B'), ('B−', 'B−'), ('C+', 'C+'), ('C', 'C'), ('C−', 'C−'), ('D', 'D'), ('E', 'E'), ('F / Fail', 'F / Fail'), ('Pass', 'Pass'), ('Merit', 'Merit'), ('Distinction', 'Distinction'), ('Honours (First Class / Upper Second / etc.)', 'Honours (First Class / Upper Second / etc.)'), ('Other (Please Specify)', 'Other (Please Specify)')], help_text='Grades achieved', max_length=100, null=True)),
                ('grades_other', models.CharField(blank=True, help_text="Other grades/qualification if 'Other (Please Specify)' is selected", max_length=100, null=True)),
                ('date_achieved', models.DateField(blank=True, help_text='Date qualification was achieved (YYYY-MM-DD)', null=True)),
                ('has_learning_difficulty', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Whether the learner has any learning difficulties', max_length=3, null=True)),
                ('learning_difficulty_details', models.TextField(blank=True, help_text='Details of learning difficulty if applicable', null=True)),
                ('education_data', models.JSONField(blank=True, help_text='Multiple education records stored as JSON', null=True)),
                ('job_role', models.CharField(blank=True, help_text='Current or most recent job role', max_length=800, null=True)),
                ('industry', models.CharField(blank=True, choices=[('Office and Administration', 'Office and Administration'), ('Customer Service and Retail', 'Customer Service and Retail'), ('Construction and Trades', 'Construction and Trades'), ('Healthcare', 'Healthcare'), ('Education', 'Education'), ('Information Technology', 'Information Technology'), ('Manufacturing', 'Manufacturing'), ('Hospitality and Catering', 'Hospitality and Catering'), ('Finance and Banking', 'Finance and Banking'), ('Other', 'Other')], help_text='Industry sector', max_length=50, null=True)),
                ('industry_other', models.CharField(blank=True, help_text="Other industry if 'Other' is selected", max_length=100, null=True)),
                ('duration', models.CharField(blank=True, choices=[('Less than 6 months', 'Less than 6 months'), ('6 months to 1 year', '6 months to 1 year'), ('1-2 years', '1-2 years'), ('2-5 years', '2-5 years'), ('Over 5 years', 'Over 5 years')], help_text='Duration in role', max_length=20, null=True)),
                ('key_skills', models.TextField(blank=True, help_text='Key skills and competencies', null=True)),
                ('employment_data', models.JSONField(blank=True, help_text='Multiple employment records stored as JSON', null=True)),
                ('cv_file', models.FileField(blank=True, help_text='Upload CV (PDF/Word, <5MB)', null=True, upload_to='user_files/cv/')),
                ('initial_assessment_english', models.BooleanField(default=False, help_text='Initial assessment for English')),
                ('initial_assessment_maths', models.BooleanField(default=False, help_text='Initial assessment for Maths')),
                ('initial_assessment_subject_specific', models.BooleanField(default=False, help_text='Initial assessment for Subject Specific skills')),
                ('initial_assessment_other', models.BooleanField(default=False, help_text='Initial assessment for Other skills')),
                ('initial_assessment_date', models.DateField(blank=True, help_text='Date of initial assessment', null=True)),
                ('diagnostic_assessment_english', models.BooleanField(default=False, help_text='Diagnostic assessment for English')),
                ('diagnostic_assessment_maths', models.BooleanField(default=False, help_text='Diagnostic assessment for Maths')),
                ('diagnostic_assessment_subject_specific', models.BooleanField(default=False, help_text='Diagnostic assessment for Subject Specific skills')),
                ('diagnostic_assessment_other', models.BooleanField(default=False, help_text='Diagnostic assessment for Other skills')),
                ('diagnostic_assessment_date', models.DateField(blank=True, help_text='Date of diagnostic assessment', null=True)),
                ('functional_skills_english', models.BooleanField(default=False, help_text='Functional skills assessment for English')),
                ('functional_skills_maths', models.BooleanField(default=False, help_text='Functional skills assessment for Maths')),
                ('functional_skills_other', models.BooleanField(default=False, help_text='Functional skills assessment for Other skills')),
                ('functional_skills_date', models.DateField(blank=True, help_text='Date of functional skills assessment', null=True)),
                ('initial_assessment_english_score', models.DecimalField(blank=True, decimal_places=2, help_text='Initial Assessment English score (0-100)', max_digits=5, null=True)),
                ('initial_assessment_maths_score', models.DecimalField(blank=True, decimal_places=2, help_text='Initial Assessment Maths score (0-100)', max_digits=5, null=True)),
                ('initial_assessment_subject_score', models.DecimalField(blank=True, decimal_places=2, help_text='Initial Assessment Subject Specific score (0-100)', max_digits=5, null=True)),
                ('initial_assessment_other_score', models.DecimalField(blank=True, decimal_places=2, help_text='Initial Assessment Other score (0-100)', max_digits=5, null=True)),
                ('diagnostic_assessment_english_score', models.DecimalField(blank=True, decimal_places=2, help_text='Diagnostic Assessment English score (0-100)', max_digits=5, null=True)),
                ('diagnostic_assessment_maths_score', models.DecimalField(blank=True, decimal_places=2, help_text='Diagnostic Assessment Maths score (0-100)', max_digits=5, null=True)),
                ('diagnostic_assessment_subject_score', models.DecimalField(blank=True, decimal_places=2, help_text='Diagnostic Assessment Subject score (0-100)', max_digits=5, null=True)),
                ('diagnostic_assessment_other_score', models.DecimalField(blank=True, decimal_places=2, help_text='Diagnostic Assessment Other score (0-100)', max_digits=5, null=True)),
                ('functional_skills_english_score', models.DecimalField(blank=True, decimal_places=2, help_text='Functional Skills English score (0-100)', max_digits=5, null=True)),
                ('functional_skills_maths_score', models.DecimalField(blank=True, decimal_places=2, help_text='Functional Skills Maths score (0-100)', max_digits=5, null=True)),
                ('functional_skills_other_score', models.DecimalField(blank=True, decimal_places=2, help_text='Functional Skills Other score (0-100)', max_digits=5, null=True)),
                ('functional_skills_level', models.CharField(blank=True, choices=[('Entry Level', 'Entry Level'), ('Level 1', 'Level 1'), ('Level 2', 'Level 2')], help_text='Functional Skills Level', max_length=20, null=True)),
                ('statement_of_purpose_file', models.FileField(blank=True, help_text='Statement of Purpose file (PDF/Word, <5MB)', null=True, upload_to='user_files/statement_of_purpose/')),
                ('reason_for_pursuing_course', models.TextField(blank=True, help_text='Reason for pursuing this course', null=True)),
                ('career_objectives', models.TextField(blank=True, help_text='Career objectives', null=True)),
                ('relevant_past_work', models.TextField(blank=True, help_text='Relevant past work experience', null=True)),
                ('special_interests_and_strengths', models.TextField(blank=True, help_text='Special interests and strengths', null=True)),
                ('achievements_and_awards', models.TextField(blank=True, help_text='Achievements and awards', null=True)),
                ('assigned_instructor', models.ForeignKey(blank=True, help_text='The instructor assigned to this learner.', limit_choices_to={'role': 'instructor'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_students', to=settings.AUTH_USER_MODEL)),
                ('branch', models.ForeignKey(blank=True, help_text='The branch this user belongs to. Not required for Global Admin users.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='branches.branch')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_permissions_set', to='auth.Permission')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users_customuser',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserTimezone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timezone', models.CharField(default='UTC', help_text="User's preferred timezone (e.g., 'America/New_York', 'Europe/London')", max_length=100)),
                ('auto_detected', models.BooleanField(default=False, help_text='Whether timezone was auto-detected from browser')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='timezone_preference', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Timezone',
                'verbose_name_plural': 'User Timezones',
            },
        ),
        migrations.CreateModel(
            name='UserQuestionnaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='The question text')),
                ('answer_text', models.TextField(blank=True, help_text='The answer to the question', null=True)),
                ('document', models.FileField(blank=True, help_text='Supporting document for this question', null=True, upload_to='questionnaire_documents/')),
                ('confirmation_required', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No')], help_text='Whether confirmation is required for this question', max_length=3, null=True)),
                ('question_order', models.PositiveIntegerField(default=1, help_text='Order of the question')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this questionnaire entry', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_questionnaires', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questionnaires', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Questionnaire',
                'verbose_name_plural': 'User Questionnaires',
                'ordering': ['question_order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='TwoFactorAuth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=False, help_text='Enable 2FA for regular email/password login')),
                ('oauth_enabled', models.BooleanField(default=False, help_text='Enable 2FA for Google/Microsoft OAuth login')),
                ('totp_enabled', models.BooleanField(default=False, help_text='Enable TOTP authenticator app 2FA')),
                ('totp_secret', models.CharField(blank=True, help_text='Secret key for TOTP generation', max_length=32, null=True)),
                ('backup_tokens', models.JSONField(blank=True, default=list, help_text='One-time backup tokens for account recovery')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='two_factor_auth', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Two Factor Authentication',
                'verbose_name_plural': 'Two Factor Authentications',
            },
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('branch', models.ForeignKey(blank=True, help_text='Branch context for this reset request', null=True, on_delete=django.db.models.deletion.CASCADE, to='branches.branch')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Password Reset Token',
                'verbose_name_plural': 'Password Reset Tokens',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OTPToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp_code', models.CharField(max_length=6)),
                ('purpose', models.CharField(choices=[('login', 'Login Verification'), ('settings', 'Settings Change')], default='login', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='otp_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'OTP Token',
                'verbose_name_plural': 'OTP Tokens',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ManualVAKScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visual_score', models.DecimalField(blank=True, decimal_places=1, help_text='Manual Visual learning style score (0-100)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('auditory_score', models.DecimalField(blank=True, decimal_places=1, help_text='Manual Auditory learning style score (0-100)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('kinesthetic_score', models.DecimalField(blank=True, decimal_places=1, help_text='Manual Kinesthetic learning style score (0-100)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entered_by', models.ForeignKey(blank=True, help_text='Admin/Instructor who entered the manual scores', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entered_vak_scores', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(help_text='User for whom VAK scores are manually entered', on_delete=django.db.models.deletion.CASCADE, related_name='manual_vak_score', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Manual VAK Score',
                'verbose_name_plural': 'Manual VAK Scores',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailVerificationToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('branch', models.ForeignKey(blank=True, help_text='Branch context for this verification request', null=True, on_delete=django.db.models.deletion.CASCADE, to='branches.branch')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_verification_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Verification Token',
                'verbose_name_plural': 'Email Verification Tokens',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserQuizAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignment_type', models.CharField(choices=[('initial_assessment', 'Initial Assessment'), ('vak_test', 'VAK Test')], help_text='Type of assignment (Initial Assessment or VAK Test)', max_length=20)),
                ('item_name', models.CharField(help_text='Display name for the quiz assignment (defaults to quiz title)', max_length=800)),
                ('assigned_at', models.DateTimeField(auto_now_add=True, help_text='When the quiz was assigned')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the assignment is active')),
                ('notes', models.TextField(blank=True, help_text='Optional notes about the assignment', null=True)),
                ('assigned_by', models.ForeignKey(blank=True, help_text='Admin/Instructor who assigned the quiz', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_quizzes', to=settings.AUTH_USER_MODEL)),
                ('quiz', models.ForeignKey(help_text='Quiz assigned to the user', on_delete=django.db.models.deletion.CASCADE, related_name='user_assignments', to='quiz.quiz')),
                ('user', models.ForeignKey(help_text='User who is assigned the quiz', on_delete=django.db.models.deletion.CASCADE, related_name='quiz_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['assigned_at'],
                'unique_together': {('user', 'quiz', 'assignment_type')},
            },
        ),
        migrations.CreateModel(
            name='ManualAssessmentEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(help_text='Subject or assessment name', max_length=800)),
                ('score', models.DecimalField(decimal_places=2, help_text='Assessment score (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('notes', models.TextField(blank=True, help_text='Optional notes about the assessment', null=True)),
                ('assessment_date', models.DateField(blank=True, help_text='Date of assessment', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entered_by', models.ForeignKey(blank=True, help_text='Admin/Instructor who entered the manual assessment', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entered_manual_assessments', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User for whom manual assessment data is entered', on_delete=django.db.models.deletion.CASCADE, related_name='manual_assessment_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Manual Assessment Entry',
                'verbose_name_plural': 'Manual Assessment Entries',
                'ordering': ['-updated_at', 'subject'],
                'unique_together': {('user', 'subject')},
            },
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['role', 'is_active'], name='users_custo_role_e4c2f2_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['branch', 'role'], name='users_custo_branch__5df419_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['last_login', 'is_active'], name='users_custo_last_lo_565cc4_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['role', 'branch', 'is_active'], name='users_custo_role_752723_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['date_joined'], name='users_custo_date_jo_3d5338_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['branch', 'date_joined'], name='users_custo_branch__bb7f4d_idx'),
        ),
    ]
