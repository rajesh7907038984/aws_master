# Generated by Django 3.2.25 on 2025-10-29 09:47

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CareerGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_term_goal', models.TextField(help_text='Short-term career goal (1-2 years)')),
                ('long_term_goal', models.TextField(help_text='Long-term career goal (5+ years)')),
                ('target_industry', models.CharField(blank=True, help_text='Target industry or sector', max_length=100, null=True)),
                ('required_skills', models.TextField(blank=True, help_text='Skills needed to achieve these goals', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='EducatorNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField()),
                ('is_private', models.BooleanField(default=False, help_text='Private notes only visible to staff')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='HealthSafetyDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Document title', max_length=200)),
                ('document_file', models.FileField(help_text='Upload health & safety document (PDF, DOC, DOCX, TXT)', upload_to='health_safety_documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'txt'])])),
                ('description', models.TextField(blank=True, help_text='Optional description of the document', null=True)),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this document is mandatory for the learner to read')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HealthSafetyDocumentReadReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-read_at'],
            },
        ),
        migrations.CreateModel(
            name='HealthSafetyQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='The health & safety question to be answered')),
                ('answer_text', models.TextField(blank=True, help_text='Answer provided by student/instructor', null=True)),
                ('student_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Student confirmation of understanding', max_length=3)),
                ('instructor_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Instructor confirmation of completion', max_length=3)),
                ('student_comment', models.TextField(blank=True, help_text="Student's additional comments or questions", null=True)),
                ('instructor_reply', models.TextField(blank=True, help_text="Instructor's reply to student comments", null=True)),
                ('order', models.PositiveIntegerField(default=1, help_text='Display order within the section')),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this question must be answered')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='HealthSafetyQuestionnaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('named_first_aider', models.TextField(blank=True, help_text='Who is the named first aider?', null=True)),
                ('named_first_aider_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Confirmed understanding of first aider information', max_length=3)),
                ('fire_extinguishers_location', models.TextField(blank=True, help_text='Where are the fire extinguishers?', null=True)),
                ('fire_extinguishers_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Confirmed awareness of fire extinguisher locations', max_length=3)),
                ('first_aid_box_location', models.TextField(blank=True, help_text='Where is the First Aid box kept?', null=True)),
                ('first_aid_box_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Confirmed awareness of first aid box location', max_length=3)),
                ('fire_assembly_point', models.TextField(blank=True, help_text='Where is the Fire Assembly point?', null=True)),
                ('fire_assembly_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Confirmed awareness of fire assembly point', max_length=3)),
                ('accident_book_location', models.TextField(blank=True, help_text='Where is the Accident Book kept?', null=True)),
                ('accident_book_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Confirmed awareness of accident book location', max_length=3)),
                ('accident_reporting_person', models.TextField(blank=True, help_text='Who do you report accidents to?', null=True)),
                ('accident_reporting_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Confirmed understanding of accident reporting procedure', max_length=3)),
                ('health_safety_policy_location', models.TextField(blank=True, help_text='Where is the Health & Safety Policy displayed?', null=True)),
                ('health_safety_policy_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Confirmed awareness of health & safety policy location', max_length=3)),
                ('health_safety_issue_reporting', models.TextField(blank=True, help_text='Who do you report a health & safety issue to?', null=True)),
                ('health_safety_issue_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Confirmed understanding of health & safety issue reporting', max_length=3)),
                ('nearest_fire_exits', models.TextField(blank=True, help_text='Where are your nearest fire exits?', null=True)),
                ('nearest_fire_exits_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Confirmed awareness of nearest fire exits', max_length=3)),
                ('health_safety_manager', models.TextField(blank=True, help_text='Who is responsible for managing health & safety?', null=True)),
                ('health_safety_manager_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Confirmed understanding of health & safety management', max_length=3)),
                ('common_accidents', models.TextField(blank=True, help_text='What are the most common accidents in this type of environment?', null=True)),
                ('common_accidents_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Confirmed awareness of common accidents', max_length=3)),
                ('prohibited_substances', models.TextField(blank=True, help_text='What substances are prohibited at this centre?', null=True)),
                ('prohibited_substances_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Confirmed understanding of prohibited substances', max_length=3)),
                ('questionnaire_completed', models.BooleanField(default=False, help_text='Whether the learner has completed the questionnaire')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Date and time when questionnaire was completed', null=True)),
                ('learner_acknowledgment', models.BooleanField(default=False, help_text='Learner acknowledges understanding of health & safety arrangements')),
                ('acknowledgment_date', models.DateTimeField(blank=True, help_text='Date when learner acknowledged understanding', null=True)),
                ('assessor_notes', models.TextField(blank=True, help_text='Additional notes from the assessor', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HealthSafetySection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Section title (e.g., 'Fire Safety', 'First Aid', 'Emergency Procedures')", max_length=200)),
                ('description', models.TextField(blank=True, help_text='Optional description of this section', null=True)),
                ('order', models.PositiveIntegerField(default=1, help_text='Display order of this section')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this section is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='HealthSafetySectionDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Document title', max_length=200)),
                ('document_file', models.FileField(help_text='Upload document (PDF, DOC, DOCX, TXT, Images)', upload_to='health_safety_section_documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'txt', 'jpg', 'jpeg', 'png'])])),
                ('description', models.TextField(blank=True, help_text='Optional description of the document', null=True)),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this document is mandatory for learners to review')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='IndividualLearningPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='InductionChecklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('programme_content_delivery_assessment', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Programme Content, Delivery and Assessment Arrangements discussed', max_length=3)),
                ('equality_diversity', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Equality and Diversity discussed', max_length=3)),
                ('disciplinary_grievance_procedures', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Disciplinary and Grievance Procedures discussed', max_length=3)),
                ('esf_cofinancing', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='ESF and Co-financing discussed', max_length=3)),
                ('information_advice_guidance', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Information, advice and guidance discussed', max_length=3)),
                ('health_safety_safe_learner', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Health and Safety, the Safe Learner Principles discussed', max_length=3)),
                ('safeguarding_prevent_duty', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Safeguarding & Prevent Duty discussed', max_length=3)),
                ('terms_conditions_learning', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Terms and Conditions of Learning/Probation Period discussed', max_length=3)),
                ('completed_by_learner', models.BooleanField(default=False, help_text='Whether the learner has completed reviewing all documents')),
                ('learner_completion_date', models.DateTimeField(blank=True, help_text='Date when learner marked all items as complete', null=True)),
                ('assessor_notes', models.TextField(blank=True, help_text='Additional notes from the assessor about the induction process', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='InductionChecklistDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Document title', max_length=200)),
                ('document_file', models.FileField(help_text='Upload document (PDF, DOC, DOCX, TXT, Images)', upload_to='induction_section_documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'txt', 'jpg', 'jpeg', 'png'])])),
                ('description', models.TextField(blank=True, help_text='Optional description of the document', null=True)),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this document is mandatory for learners to review')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InductionChecklistQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='The question to be answered')),
                ('answer_text', models.TextField(blank=True, help_text='Answer provided by student/instructor', null=True)),
                ('student_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Student confirmation of understanding', max_length=3)),
                ('instructor_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Instructor confirmation of completion', max_length=3)),
                ('student_comment', models.TextField(blank=True, help_text="Student's additional comments or questions", null=True)),
                ('instructor_reply', models.TextField(blank=True, help_text="Instructor's reply to student comments", null=True)),
                ('order', models.PositiveIntegerField(default=1, help_text='Display order within the section')),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this question must be answered')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='InductionChecklistSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Section title (e.g., 'Health & Safety', 'Programme Information')", max_length=200)),
                ('description', models.TextField(blank=True, help_text='Optional description of this section', null=True)),
                ('order', models.PositiveIntegerField(default=1, help_text='Display order of this section')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this section is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='InductionDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Document title', max_length=200)),
                ('category', models.CharField(choices=[('programme_content', 'Programme Content, Delivery and Assessment Arrangements'), ('equality_diversity', 'Equality and Diversity'), ('disciplinary_grievance', 'Disciplinary and Grievance Procedures'), ('esf_cofinancing', 'ESF and Co-financing'), ('information_advice', 'Information, advice and guidance'), ('health_safety', 'Health and Safety, the Safe Learner Principles'), ('safeguarding_prevent', 'Safeguarding & Prevent Duty'), ('terms_conditions', 'Terms and Conditions of Learning/Probation Period'), ('general', 'General Induction Information')], help_text='Category of induction document', max_length=30)),
                ('document_file', models.FileField(help_text='Upload induction document (PDF, DOC, DOCX, TXT)', upload_to='induction_documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'txt'])])),
                ('description', models.TextField(blank=True, help_text='Optional description of the document', null=True)),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this document is mandatory for the learner to read')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='InductionDocumentReadReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-read_at'],
            },
        ),
        migrations.CreateModel(
            name='InternalCourseReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iag_session_review', models.TextField(blank=True, help_text="Review of initial IAG session and learner's feelings relating to the success of the identified actions", null=True, verbose_name="Review of initial IAG session and learner's feelings")),
                ('action_completion_skills', models.TextField(blank=True, help_text='Did the learner complete the actions and have they improved their skills?', null=True, verbose_name='Action completion and skill improvement')),
                ('careers_service_advice', models.TextField(blank=True, help_text='Advise learner of National Careers Service (Career Connect) and issue contact details (PA)', null=True, verbose_name='National Careers Service advice')),
                ('progression_routes', models.TextField(blank=True, help_text='Discuss possible progression routes (provide details of external training required) (PA)', null=True, verbose_name='Progression routes discussion')),
                ('career_objectives', models.TextField(blank=True, help_text='Discuss learner career objectives and how they may be achieved (PA)', null=True, verbose_name='Career objectives discussion')),
                ('qualification_achieved', models.CharField(blank=True, choices=[('yes', 'Yes - Qualification Achieved'), ('no', 'No - Qualification Not Achieved')], max_length=3, null=True, verbose_name='Qualification achievement')),
                ('qualification_details', models.TextField(blank=True, help_text='If qualification was not achieved, provide detailed reasons for non-achievement', null=True, verbose_name='Qualification achievement details')),
                ('review_completed_by', models.CharField(blank=True, max_length=255, null=True, verbose_name='Completed by')),
                ('review_completion_date', models.DateField(blank=True, null=True, verbose_name='Date completed')),
                ('review_status', models.CharField(choices=[('draft', 'Draft'), ('pending_review', 'Pending Review'), ('completed', 'Completed'), ('requires_update', 'Requires Update')], default='draft', max_length=20, verbose_name='Review status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Internal Course Review',
                'verbose_name_plural': 'Internal Course Reviews',
            },
        ),
        migrations.CreateModel(
            name='LearningGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goal_type', models.CharField(choices=[('short_term', 'Short Term Goal'), ('long_term', 'Long Term Goal'), ('custom', 'Custom Target')], max_length=15)),
                ('custom_target_name', models.CharField(blank=True, help_text="Custom name for the target when goal_type is 'custom'", max_length=100, null=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('target_completion_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('on_hold', 'On Hold')], default='not_started', max_length=15)),
                ('teacher_input', models.TextField(blank=True, help_text='Teacher/Instructor input on this goal', null=True)),
                ('ai_input', models.TextField(blank=True, help_text='AI-generated suggestions for this goal', null=True)),
                ('learner_comment', models.TextField(blank=True, help_text="Learner's comments on this goal", null=True)),
                ('instructor_reply', models.TextField(blank=True, help_text="Instructor's reply to learner comments", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='LearningNeeds',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_search_skills', models.BooleanField(default=False)),
                ('effective_cvs', models.BooleanField(default=False)),
                ('improving_it_skills', models.BooleanField(default=False)),
                ('interview_skills', models.BooleanField(default=False)),
                ('team_skills', models.BooleanField(default=False)),
                ('jcp_universal_jobmatch', models.BooleanField(default=False)),
                ('job_application_skills', models.BooleanField(default=False)),
                ('communication_skills', models.BooleanField(default=False)),
                ('other_skills', models.BooleanField(default=False)),
                ('other_skills_details', models.TextField(blank=True, null=True)),
                ('prior_learning_experience', models.TextField(blank=True, null=True)),
                ('learning_challenges', models.TextField(blank=True, null=True)),
                ('support_needed', models.TextField(blank=True, null=True)),
                ('preferred_learning_environment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='LearningNeedsQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='The learning needs question to be answered')),
                ('answer_text', models.TextField(blank=True, help_text='Answer provided by student/instructor', null=True)),
                ('student_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Student confirmation of understanding', max_length=3)),
                ('instructor_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Instructor confirmation of completion', max_length=3)),
                ('student_comment', models.TextField(blank=True, help_text="Student's additional comments or questions", null=True)),
                ('instructor_reply', models.TextField(blank=True, help_text="Instructor's reply to student comments", null=True)),
                ('order', models.PositiveIntegerField(default=1, help_text='Display order within the section')),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this question must be answered')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='LearningNeedsSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Section title (e.g., 'Employability Skills', 'Learning Support', 'Assessment Needs')", max_length=200)),
                ('description', models.TextField(blank=True, help_text='Optional description of this section', null=True)),
                ('order', models.PositiveIntegerField(default=1, help_text='Display order of this section')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this section is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='LearningNeedsSectionDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Document title', max_length=200)),
                ('document_file', models.FileField(help_text='Upload document (PDF, DOC, DOCX, TXT, Images)', upload_to='learning_needs_section_documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'txt', 'jpg', 'jpeg', 'png'])])),
                ('description', models.TextField(blank=True, help_text='Optional description of the document', null=True)),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this document is mandatory for learners to review')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preference_type', models.CharField(choices=[('visual', 'Visual Learning'), ('auditory', 'Auditory Learning'), ('kinesthetic', 'Kinesthetic Learning'), ('reading_writing', 'Reading/Writing'), ('group', 'Group Learning'), ('individual', 'Individual Learning'), ('practical', 'Practical/Hands-on'), ('theoretical', 'Theoretical')], max_length=20)),
                ('preference_level', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='Preference level 1-5 (5 being highest preference)')),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='LearningProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress_percentage', models.IntegerField(default=0, help_text='Progress percentage (0-100)')),
                ('learner_comment', models.TextField(blank=True, help_text="Learner's comment on progress", null=True)),
                ('teacher_comment', models.TextField(blank=True, help_text='Teacher/Instructor comment', null=True)),
                ('evidence_file', models.FileField(blank=True, help_text='Upload evidence of progress', null=True, upload_to='ilp/progress_evidence/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png'])])),
                ('review_requested', models.BooleanField(default=False, help_text='Whether learner has requested a review')),
                ('review_completed', models.BooleanField(default=False, help_text='Whether teacher has completed the review')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SENDAccommodation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accommodation_type', models.CharField(choices=[('visual', 'Visual Impairments'), ('hearing', 'Hearing Impairments'), ('mobility', 'Mobility/Physical'), ('cognitive', 'Cognitive/Learning'), ('mental_health', 'Mental Health'), ('other', 'Other')], max_length=20)),
                ('accommodation_type_other', models.CharField(blank=True, help_text="Other accommodation type if 'Other' is selected", max_length=100, null=True)),
                ('description', models.TextField(help_text='Description of the accommodation needed')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SimpleStrengthsWeaknesses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strengths_content', models.TextField(blank=True, help_text="Learner's strengths assessment", null=True)),
                ('strengths_updated_at', models.DateTimeField(auto_now=True)),
                ('strengths_approval', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('not_approved', 'Not Approved')], default='pending', help_text="Learner's approval status for strengths assessment", max_length=15)),
                ('strengths_learner_comment', models.TextField(blank=True, help_text="Learner's comment on strengths assessment", null=True)),
                ('strengths_instructor_reply', models.TextField(blank=True, help_text="Instructor's reply to learner's strengths feedback", null=True)),
                ('development_content', models.TextField(blank=True, help_text='Areas for development assessment', null=True)),
                ('development_updated_at', models.DateTimeField(auto_now=True)),
                ('development_approval', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('not_approved', 'Not Approved')], default='pending', help_text="Learner's approval status for development areas assessment", max_length=15)),
                ('development_learner_comment', models.TextField(blank=True, help_text="Learner's comment on development areas assessment", null=True)),
                ('development_instructor_reply', models.TextField(blank=True, help_text="Instructor's reply to learner's development feedback", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Simple Strengths & Weaknesses Assessment',
                'verbose_name_plural': 'Simple Strengths & Weaknesses Assessments',
            },
        ),
        migrations.CreateModel(
            name='StatementOfPurpose',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sop_file', models.FileField(blank=True, help_text='Upload Statement of Purpose (PDF/Word, <5MB)', null=True, upload_to='ilp/sop_files/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx'])])),
                ('reason_for_course', models.TextField(blank=True, help_text='Why are you pursuing this course?', null=True)),
                ('career_objectives', models.TextField(blank=True, help_text='What are your career objectives?', null=True)),
                ('relevant_experience', models.TextField(blank=True, help_text='Describe any relevant past work or experience', null=True)),
                ('additional_info', models.TextField(blank=True, help_text="Any additional information you'd like to share", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='StrengthsWeaknessesQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(choices=[('strength', 'Strength'), ('weakness', 'Area for Development')], help_text='Whether this is a strength or area for development', max_length=10)),
                ('description', models.TextField(help_text='Description of the strength or area for development')),
                ('student_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Student confirmation of understanding', max_length=3)),
                ('instructor_confirmed', models.CharField(blank=True, choices=[('yes', 'Yes'), ('no', 'No'), ('', 'Not Set')], default='', help_text='Instructor confirmation of completion', max_length=3)),
                ('student_comment', models.TextField(blank=True, help_text="Student's additional comments or questions", null=True)),
                ('instructor_comment', models.TextField(blank=True, help_text="Instructor's response to student feedback", null=True)),
                ('order', models.PositiveIntegerField(default=1, help_text='Display order within the section')),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this assessment must be confirmed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='StrengthsWeaknessesSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Section title (e.g., 'Academic Strengths', 'Communication Skills', 'Areas for Development')", max_length=200)),
                ('description', models.TextField(blank=True, help_text='Optional description of this section', null=True)),
                ('order', models.PositiveIntegerField(default=1, help_text='Display order of this section')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this section is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'title'],
            },
        ),
        migrations.CreateModel(
            name='StrengthsWeaknessesSectionDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Document title', max_length=200)),
                ('document_file', models.FileField(help_text='Upload document (PDF, DOC, DOCX, TXT, Images)', upload_to='strengths_weaknesses_section_documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'txt', 'jpg', 'jpeg', 'png'])])),
                ('description', models.TextField(blank=True, help_text='Optional description of the document', null=True)),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this document is mandatory for learners to review')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StrengthWeakness',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('strength', 'Strength'), ('weakness', 'Weakness')], max_length=10)),
                ('description', models.TextField()),
                ('source', models.CharField(choices=[('ai_analysis', 'AI Analysis'), ('teacher_input', 'Teacher Input'), ('self_assessment', 'Self Assessment')], default='teacher_input', max_length=15)),
                ('confidence_score', models.DecimalField(blank=True, decimal_places=2, help_text='AI confidence score (0.00-1.00)', max_digits=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='StrengthWeaknessFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('instructor_initial', 'Instructor Initial Feedback'), ('learner_response', 'Learner Response'), ('instructor_reply', 'Instructor Reply'), ('learner_follow_up', 'Learner Follow-up')], help_text='Type of feedback in the discussion thread', max_length=20)),
                ('content', models.TextField(help_text='Feedback content/message')),
                ('approval_status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('not_approved', 'Not Approved'), ('needs_revision', 'Needs Revision')], default='pending', help_text="Learner's approval status for instructor feedback", max_length=15)),
                ('approval_comment', models.TextField(blank=True, help_text='Additional comment with approval/disapproval', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
    ]
