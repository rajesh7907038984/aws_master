# Generated by Django 3.2.25 on 2025-10-29 09:47

import assignments.models
import core.utils.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AdminApprovalHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approval_status', models.CharField(choices=[('approved', 'Approved'), ('needs_revision', 'Needs Revision'), ('rejected', 'Rejected')], help_text='Admin approval status for the assignment report', max_length=20)),
                ('admin_feedback', models.TextField(blank=True, help_text='Internal verifier feedback on the assignment report', null=True)),
                ('approval_date', models.DateTimeField(auto_now_add=True, help_text='When the admin approval was given')),
                ('is_current', models.BooleanField(default=True, help_text='Whether this is the current/latest approval status')),
                ('trigger_reason', models.CharField(blank=True, help_text="What triggered this approval review (e.g., 'new_feedback', 'file_resubmission', 'text_revision')", max_length=800, null=True)),
            ],
            options={
                'verbose_name_plural': 'Admin approval histories',
                'ordering': ['-approval_date'],
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=800)),
                ('description', core.utils.fields.TinyMCEField(blank=True, default='', help_text='Description of the assignment')),
                ('points', models.IntegerField(default=10000)),
                ('instructions', core.utils.fields.TinyMCEField(blank=True, default='', help_text='Detailed instructions for completing the assignment', null=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('attachment', models.FileField(blank=True, help_text='Supporting documents for the assignment (Use AssignmentAttachment for new documents)', null=True, upload_to=assignments.models.assignment_file_path)),
                ('content_type', models.CharField(blank=True, help_text='MIME type of the attachment', max_length=800, null=True)),
                ('max_score', models.DecimalField(decimal_places=2, default=100.0, max_digits=5)),
                ('submission_type', models.CharField(choices=[('file', 'File Upload Only'), ('text', 'Text/Quiz Response Only'), ('both', 'Both File Upload and Text/Quiz Response')], default='file', max_length=20)),
                ('allowed_file_types', models.CharField(default='.pdf,.doc,.docx,.txt,.ppt,.pptx,.mp4,.mov,.avi,.wmv', help_text='Comma-separated list of allowed file extensions', max_length=800)),
                ('max_file_size', models.IntegerField(default=629145600, help_text='Maximum file size in bytes')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Supporting document for the assignment', upload_to=assignments.models.assignment_file_path)),
                ('file_name', models.CharField(blank=True, max_length=800)),
                ('content_type', models.CharField(blank=True, help_text='MIME type of the attachment', max_length=800, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='The content of the comment')),
                ('is_private', models.BooleanField(default=False, help_text='Whether this comment is private (instructor only)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary course for the assignment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-is_primary', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback', models.TextField(blank=True, help_text='Text feedback from instructor')),
                ('audio_feedback', models.FileField(blank=True, help_text='Audio feedback file (mp3, wav, m4a, etc.)', null=True, upload_to=assignments.models.assignment_file_path)),
                ('video_feedback', models.FileField(blank=True, help_text='Video feedback file (mp4, mov, avi, etc.)', null=True, upload_to=assignments.models.assignment_file_path)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_private', models.BooleanField(default=False, help_text='Whether feedback is visible to the student or only to instructors')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentInteractionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('view', 'Assignment Viewed'), ('start_submission', 'Started Submission'), ('draft_save', 'Draft Saved'), ('file_upload', 'File Uploaded'), ('file_download', 'File Downloaded'), ('submission_edit', 'Submission Edited'), ('submission_submit', 'Submission Submitted'), ('feedback_viewed', 'Feedback Viewed'), ('rubric_viewed', 'Rubric Viewed'), ('comment_viewed', 'Comment Viewed'), ('assignment_edit', 'Assignment Content Edited'), ('page_exit', 'Page Exited'), ('session_timeout', 'Session Timeout')], max_length=50)),
                ('interaction_data', models.JSONField(blank=True, help_text='Additional data about the interaction (file names, duration, etc.)', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('session_key', models.CharField(blank=True, max_length=40, null=True)),
                ('duration_seconds', models.PositiveIntegerField(blank=True, help_text='Duration of interaction in seconds (for timed interactions)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentReportConfirmation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confirmed_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, help_text='Optional notes about the confirmation')),
            ],
            options={
                'ordering': ['-confirmed_at'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentSessionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('total_duration_seconds', models.PositiveIntegerField(default=0)),
                ('page_views', models.PositiveIntegerField(default=0)),
                ('interactions_count', models.PositiveIntegerField(default=0)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='AssignmentSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_file', models.FileField(blank=True, null=True, upload_to=assignments.models.assignment_file_path)),
                ('submission_text', models.TextField(blank=True, help_text='Text submission or comments')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('not_graded', 'Not Graded'), ('graded', 'Graded'), ('returned', 'Returned for Revision'), ('late', 'Late'), ('missing', 'Missing'), ('excused', 'Excused')], default='not_graded', max_length=20)),
                ('grade', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('admin_approval_status', models.CharField(blank=True, choices=[('approved', 'Approved'), ('needs_revision', 'Needs Revision'), ('rejected', 'Rejected')], help_text='Admin approval status for the assignment report', max_length=20, null=True)),
                ('admin_approval_feedback', models.TextField(blank=True, help_text='Internal verifier feedback on the assignment report', null=True)),
                ('admin_approval_date', models.DateTimeField(blank=True, help_text='When the admin approval was given', null=True)),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='FileSubmissionIteration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iteration_number', models.PositiveIntegerField(default=1, help_text='Iteration number for this file upload (1, 2, 3, etc.)')),
                ('file', models.FileField(help_text='The uploaded file for this iteration', upload_to=assignments.models.assignment_file_path)),
                ('file_name', models.CharField(blank=True, help_text='Original filename', max_length=800, null=True)),
                ('file_size', models.PositiveBigIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('content_type', models.CharField(blank=True, help_text='MIME type of the file', max_length=500, null=True)),
                ('description', models.TextField(blank=True, help_text='Optional description or notes about this file version')),
                ('is_submitted', models.BooleanField(default=False, help_text='Whether this iteration has been submitted by the learner')),
                ('submitted_at', models.DateTimeField(blank=True, help_text='When this iteration was submitted', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['iteration_number'],
            },
        ),
        migrations.CreateModel(
            name='FileSubmissionIterationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_text', models.TextField(help_text='Instructor feedback for this file iteration')),
                ('allows_new_iteration', models.BooleanField(default=True, help_text='Whether this feedback allows the learner to submit a new file')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GradeHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('previous_grade', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('new_grade', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('previous_status', models.CharField(blank=True, choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('not_graded', 'Not Graded'), ('graded', 'Graded'), ('returned', 'Returned for Revision'), ('late', 'Late'), ('missing', 'Missing'), ('excused', 'Excused')], max_length=20, null=True)),
                ('new_status', models.CharField(blank=True, choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('not_graded', 'Not Graded'), ('graded', 'Graded'), ('returned', 'Returned for Revision'), ('late', 'Late'), ('missing', 'Missing'), ('excused', 'Excused')], max_length=20, null=True)),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.TextField(blank=True, help_text='Optional comment about the grade change')),
            ],
            options={
                'verbose_name_plural': 'Grade histories',
                'ordering': ['-changed_at'],
            },
        ),
        migrations.CreateModel(
            name='StudentAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.TextField(help_text="Student's answer to the question")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupportingDocQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(help_text='Question related to supporting documents')),
                ('answer', models.TextField(blank=True, help_text='Instructor reference answer to the question', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TextQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(help_text='The text of the question')),
                ('question_html', models.TextField(blank=True, help_text='The HTML version of the question text', null=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order of the question')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='TextQuestionAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['question__order'],
            },
        ),
        migrations.CreateModel(
            name='TextQuestionAnswerIteration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iteration_number', models.PositiveIntegerField(default=1, help_text='Iteration number for this response (1, 2, 3, etc.)')),
                ('answer_text', models.TextField(help_text="The learner's response text")),
                ('is_submitted', models.BooleanField(default=False, help_text='Whether this iteration has been submitted by the learner')),
                ('submitted_at', models.DateTimeField(blank=True, help_text='When this iteration was submitted', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['question__order', 'iteration_number'],
            },
        ),
        migrations.CreateModel(
            name='TextQuestionIterationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_text', models.TextField(help_text='Instructor feedback for this specific iteration')),
                ('allows_new_iteration', models.BooleanField(default=True, help_text='Whether this feedback allows the learner to submit a new iteration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TextSubmissionAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['field__order'],
            },
        ),
        migrations.CreateModel(
            name='TextSubmissionAnswerIteration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iteration_number', models.PositiveIntegerField(default=1, help_text='Iteration number for this response (1, 2, 3, etc.)')),
                ('answer_text', models.TextField(help_text="The learner's response text")),
                ('is_submitted', models.BooleanField(default=False, help_text='Whether this iteration has been submitted by the learner')),
                ('submitted_at', models.DateTimeField(blank=True, help_text='When this iteration was submitted', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['field__order', 'iteration_number'],
            },
        ),
        migrations.CreateModel(
            name='TextSubmissionField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='Label for the text field', max_length=800)),
                ('placeholder', models.CharField(blank=True, help_text='Placeholder text for the field', max_length=800)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order of the field')),
                ('content', models.JSONField(blank=True, help_text='JSON content for the editor field - includes delta and HTML', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='TextSubmissionIterationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_text', models.TextField(help_text='Instructor feedback for this specific iteration')),
                ('allows_new_iteration', models.BooleanField(default=True, help_text='Whether this feedback allows the learner to submit a new iteration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TopicAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assignments.assignment')),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
    ]
